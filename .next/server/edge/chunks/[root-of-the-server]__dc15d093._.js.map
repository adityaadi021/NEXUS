{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport type { NextRequest } from 'next/server';\r\n\r\nexport function middleware(request: NextRequest) {\r\n  const isAdminRoute = request.nextUrl.pathname.startsWith('/admin');\r\n  const isLoginPage = request.nextUrl.pathname === '/admin/login';\r\n  \r\n  // Get the user from localStorage (this will be handled client-side)\r\n  // The middleware can only access cookies, not localStorage\r\n  // So we'll just let the client-side handle the auth check\r\n  \r\n  // If it's the login page, allow access\r\n  if (isLoginPage) {\r\n    return NextResponse.next();\r\n  }\r\n\r\n  // For other admin routes, we'll let the client-side handle the auth check\r\n  // The AuthContext will handle redirects if needed\r\n  return NextResponse.next();\r\n}\r\n\r\nexport const config = {\r\n  matcher: '/admin/:path*',\r\n}; "],"names":[],"mappings":";;;;AAAA;AAAA;;AAGO,SAAS,WAAW,OAAoB;IAC7C,MAAM,eAAe,QAAQ,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC;IACzD,MAAM,cAAc,QAAQ,OAAO,CAAC,QAAQ,KAAK;IAEjD,oEAAoE;IACpE,2DAA2D;IAC3D,0DAA0D;IAE1D,uCAAuC;IACvC,IAAI,aAAa;QACf,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;IAC1B;IAEA,0EAA0E;IAC1E,kDAAkD;IAClD,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;AAC1B;AAEO,MAAM,SAAS;IACpB,SAAS;AACX"}}]
}